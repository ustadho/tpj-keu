/*
 * FrmPembayaran.java
 *
 * Created on February 22, 2008, 10:38 PM
 */

package tpjkeuangan;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractCellEditor;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author  root
 */
public class FrmTrxBayar_Old extends javax.swing.JFrame {
    DefaultTableModel myModel;
    MyTableCellEditor cEditor; 
    
    /** Creates new form FrmPembayaran */
    public FrmTrxBayar_Old() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblBayar = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblBayar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Kode", "Jenis Pembayaran", "Jumlah", "Keterangan"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBayar.setCellSelectionEnabled(true);
        tblBayar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblBayarKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblBayarKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tblBayarKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(tblBayar);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 12, 520, 240));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Connection  conn=null;
        ResultSet rs;
        Statement st;
        String url = "jdbc:postgresql://192.168.0.10/SGHS";
        try{
            Class.forName("org.postgresql.Driver");    
        } catch(ClassNotFoundException ce) {
            System.out.println(ce.getMessage());
        }
           
        try {
            conn = DriverManager.getConnection(url,"tadho","ustasoft");                       
            
        } catch(SQLException se) {
            System.out.println(se.getMessage());
        }
        
        myModel=(DefaultTableModel)tblBayar.getModel();
        myModel.setNumRows(0);
        
        try{
            st=conn.createStatement();
            rs=st.executeQuery("select * from poli_jenis_bayar ");
            
            while(rs.next()){
                myModel.addRow(new Object[]{
                    rs.getString(1),
                    rs.getString(2),
                    0,
                    ""
                });
                
            }
            tableLook();
        }catch(SQLException se){
            JOptionPane.showMessageDialog(this, se.getMessage());
        }
        
        cEditor=new MyTableCellEditor();
        
        tblBayar.getColumnModel().getColumn(1).setCellEditor(cEditor);
        tblBayar.getColumnModel().getColumn(2).setCellEditor(cEditor);
        
    }//GEN-LAST:event_formWindowOpened

    private void tblBayarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblBayarKeyReleased
        
    }//GEN-LAST:event_tblBayarKeyReleased

    private void tblBayarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblBayarKeyTyped
        // TODO add your handling code here:
        cEditor.setComponentFocus();
    }//GEN-LAST:event_tblBayarKeyTyped

    private void tblBayarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblBayarKeyPressed
        
    }//GEN-LAST:event_tblBayarKeyPressed
    
    public class MyTableCellEditor extends AbstractCellEditor implements TableCellEditor {
        private Toolkit toolkit;
        JTextField component=new JTextField(""); 
        JLabel label;// =new JLabel("");
        
        //DlgList lst2; 
        
        //DecimalFormat df=new DecimalFormat("#,##0");
        int col, row;
        
        //FrmCopyResep1 cpForm;
        
        public void initList(Connection co){
//            lst2=new DlgList(JOptionPane.getFrameForComponent(cpForm), true);
//            lst2.setVisible(false);
//            lst2.setSize(500,150);
//            lst2.con = co;
        }
        
        public void setComponent(JTextField com){
            component=com;
            
            component.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyPressed(java.awt.event.KeyEvent evt) {
                    componentKeyPressed(evt);
                }
                
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    if(col==4)
                        componentKeyReleased(evt);
                }
            }); 
            
            component.addFocusListener(new java.awt.event.FocusAdapter() {
                 public void focusGained(java.awt.event.FocusEvent evt) {
                      componentFocusGained(evt);
                      
                 }
                 public void focusLost(java.awt.event.FocusEvent evt) {
                      componentFocusLost(evt);
                 }
            });                    
          
        }
        
        public void setCellLabel(JLabel lbl){
            label=lbl;
        }
        
//        public void setFormMain(FrmCopyResep1 cp){
//            cpForm=cp;
//        }
        
        public void setComponentFocus(){
//            component.setSelectionStart(0);
//            component.setSelectionEnd(component.getText().length());
            component.requestFocusInWindow();
            component.requestFocus();
        }
        
//        Font ft=new Font("Tahoma",Font.BOLD,14);
//        component.setFont(new Font("Tahoma",Font.BOLD,14));
        
        private NumberFormat  nf=NumberFormat.getInstance();
         
        public Component getTableCellEditorComponent(JTable table, Object value,
            boolean isSelected, int rowIndex, int vColIndex) {
            // 'value' is value contained in the cell located at (rowIndex, vColIndex)
            
           col=vColIndex;
           row=rowIndex;
           component.setBackground(new Color(248,255,167));
           if (isSelected) {
               
            
           }       
           //System.out.println("Value dari editor :"+value);
            component.setText(value==null? "": value.toString());                                    
            //component.setText(df.format(value));                                    
                        
            if(value instanceof Double || value instanceof Float|| value instanceof Integer){
                try {
                    //Double dVal=Double.parseDouble(value.toString().replace(",",""));
                    Number dVal = nf.parse(value.toString());
                    component.setText(nf.format(dVal));
                } catch (ParseException ex) {
                    Logger.getLogger(FrmTrxBayar_Old.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else
                component.setText(value==null? "":value.toString());
           return component;
        }
         
        private void componentFocusLost(java.awt.event.FocusEvent evt) {
//            if (component.isVisible()==false){
//                //System.out.println("Component Focus Lost"+"-"+tblJadwal.getSelectedRow()+"-"+tblJadwal.getSelectedColumn()); 
//                lst.setVisible(false);
//            }
//            if(lst.isVisible())
//                lst.setVisible(false)
        }  
        
        private void componentFocusGained(java.awt.event.FocusEvent evt) {
            if(col==3)
                component.setSelectionStart(0);
            component.setSelectionEnd(component.getText().length());
            //System.out.println("Component Focus Gained");               
        }  
 
        public void componentKeyReleased(java.awt.event.KeyEvent evt) {
//            try {
                String sCari = component.getText();
                int rowPos=tblBayar.getSelectedRow();
                
                switch(evt.getKeyCode()) {

                    case java.awt.event.KeyEvent.VK_ENTER : {
//                        if (lst2.isVisible()){
//                            Object[] obj = lst2.getOResult();
//                            if (obj.length > 0) {
//                                if (obj[0].toString().equalsIgnoreCase(component.getText())){
//                                    component.setText(obj[0].toString());
//                                    //lblMilik.setText(obj[1].toString());
//                                    lst2.setVisible(false);
//                                }
//                            }
//                        }
                        break;

                    }
                    case java.awt.event.KeyEvent.VK_DELETE: {
//                        lst2.setFocusable(true);
//                        lst2.requestFocus();

                        break;
                    }
                        
                    case java.awt.event.KeyEvent.VK_ESCAPE: {
                        //lst.setFocusable(true);
//                        lst2.setVisible(false);

                        break;
                    }
                    
                    case java.awt.event.KeyEvent.VK_DOWN: {
//                        if (lst2.isVisible()){
//                            lst2.setFocusableWindowState(true);
//                            lst2.setVisible(true);
//                            lst2.requestFocus();
//                        }
                        break;
                    }
                    default : {
//                        if(!evt.getKeyText(evt.getKeyCode()).equalsIgnoreCase("Up")){
//                            String sQry="select kode, cara_pakai from phar_cara_pakai where upper(kode||cara_pakai) Like '%" + sCari.toUpperCase() +"%' order by 1";
//                            System.out.println(sQry);
//                            lst2.setSQuery(sQry);
//
//                            lst2.setBounds( cpForm.getX()+tblResep.getX() + component.getX()+19, 
//                                    cpForm.getY() + tblResep.getY()+component.getY() + component.getHeight()+tblResep.getComponentZOrder(component)+269, 
//                                    380,150);
//                            
//                            lst2.setFocusableWindowState(false);
//                            lst2.setTxtCari(component);
//                            lst2.setLblDes(new javax.swing.JLabel[]{label});
//                            lst2.setTableDest(tblResep, rowPos, 4);
//                            lst2.setColWidth(0, component.getWidth()-20);
//                            lst2.setColWidth(1, 290);
//                            if(lst2.getIRowCount()>0 && component.getText().length()>0){
//                                lst2.setVisible(true);
//                            } else{
//                                component.setText("");//lblMilik.setText("");
//                                lst2.setVisible(false);
//                            }
//                        }
                        break;
                    }
                }
//            } catch (SQLException se) {//System.out.println(se.getMessage());
//                JOptionPane.showMessageDialog(null, se.getMessage(),"SHS Message",JOptionPane.OK_OPTION);
//            }
            
            
        }

        public void componentKeyPressed(java.awt.event.KeyEvent evt) {                                  
           //System.out.println(evt.getKeyChar());
           if (evt.getKeyChar() == evt.CHAR_UNDEFINED){
               
           }else{                
            
           }
            
           //----------------------------------
          char c = evt.getKeyChar();
          if (!((c >= '0') && (c <= '9') ||
             (c != KeyEvent.VK_BACK_SPACE) ||
             (c != KeyEvent.VK_DELETE) ||
             (c != KeyEvent.VK_ENTER))) {
                getToolkit().beep();
                evt.consume();
                return;
          }
           
           //-----------------------------------
           switch(evt.getKeyCode()) {
               case KeyEvent.VK_ENTER:{
                        //tblResep.changeSelection(tblResep.getSelectedRow()-1,tblResep.getSelectedColumn()+1, false, false);
                        if(component.isVisible()){
                            
                            tblBayar.setRowSelectionInterval(tblBayar.getSelectedRow(), tblBayar.getSelectedRow());
                            component.setSelectionStart(0);
                            component.setSelectionEnd(component.getText().length());
//                            component.setVisible(false);
                        }else{
                            component.setVisible(true);
                            component.setFocusable(true);
                            component.setSelectionStart(0);
                            component.setSelectionEnd(component.getText().length());
                            }
                        
                        if(col<6){
                            //tblResep.changeSelection(row, col, false, false);
                            //tblResep.setRowSelectionInterval(row-1, row-1);
                            tblBayar.setColumnSelectionInterval(col, col);
                            
                            if(tblBayar.getSelectedRow()>0)
                                tblBayar.setRowSelectionInterval(row-1, row-1);
                            
                        }else
                        {
                            tblBayar.changeSelection(row, col, false, false);
                            tblBayar.setColumnSelectionInterval(row, 3);
                        }
                        }
                        break;
                    
                    case java.awt.event.KeyEvent.VK_DOWN:{
                        //System.out.println("ok Key down");
                        int row=tblBayar.getSelectedRow();
                        System.out.println(row);
                        
//                        if(lst2.isVisible()){
//                            //tblResep.setRowSelectionInterval(row, row);
//                            component.setVisible(true);
//                            lst2.setFocusable(true);
//                            lst2.setFocusableWindowState(true);
//                            lst2.requestFocus();
//                            
//                        }
//                        else{
//                            if(tblResep.getRowCount()>tblResep.getSelectedRow())
//                            {
//                                tblResep.setRowSelectionInterval(tblResep.getSelectedRow(), tblResep.getSelectedRow());
//                                tblResep.setColumnSelectionInterval(col, col);
//                            }
//                            else
//                                //tblResep.setRowSelectionInterval(tblResep.getRowCount(), tblResep.getRowCount());
//                                tblResep.setRowSelectionInterval(tblResep.getRowCount(), tblResep.getRowCount());
//                            }
                        }
                        break;
                        
                    case java.awt.event.KeyEvent.VK_UP:{
                        //System.out.println("ok Key Up");
                        if(tblBayar.getSelectedRow()>0)
                        
                            tblBayar.setRowSelectionInterval(tblBayar.getSelectedRow(), tblBayar.getSelectedRow());
                        else
                            tblBayar.setRowSelectionInterval(0,0);
                        }
                    
                    default:
                        {
                            component.setSelectionEnd(component.getText().length());
                        }                        
                        break;
                }
        }
                    
        public Object getCellEditorValue() {
//            //System.out.println(lf.getResCode()+"  "+lf.getResDes());
            Object o="";//=component.getText();
//            if((Double)Double.parseDouble(component.getText().replace(",","")) instanceof Number)
//            {
////            if ((o!=null) && o instanceof Double)
//                //return ((JTextField)component).getText();
//                o=((JTextField)component).getText();
//                //o=doubleFormatter.format(((JTextField)component).getText());
//            }
//            else
//                o=0;
            
            //====================================================================
            Object retVal = 0;
		if(col==3){
                    try {
                            retVal = Integer.parseInt(((JTextField)component).getText().replace(",",""));
                            o=nf.format(retVal);
                            return o;
                    } catch (Exception e) {
                            toolkit.beep();
                            retVal=0;
                    }
                }else
                    retVal=(Object)component.getText();
		return retVal;
                
            //return o;                                    
        }
        
        public int getValue() {
		int retVal = 0;
		try {
			retVal = Integer.parseInt(((JTextField)component).getText());
		} catch (Exception e) {
			toolkit.beep();
		}
		return retVal;
	}
    }
    
    public class MyRowRenderer extends DefaultTableCellRenderer implements TableCellRenderer{
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            //Component comp = getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            
            Color g1 = new Color(239,234,240);//-->>(251,236,177);// Kuning         [251,251,235]
            Color g2 = new Color(239,234,240);//-->>(241,226,167);// Kuning         [247,247,218]
            
            Color w1 = new Color(255,255,255);// Putih
            Color w2 = new Color(250,250,250);// Putih Juga
            
            Color h1 = new Color(255,240,240);// Merah muda
            Color h2 = new Color(250,230,230);// Merah Muda
            
            Color g;
            Color w;
            Color h;
            
            if(column%2==0){
                g = g1;
                w = w1;
                h = h1;
            }else{
                g = g2;
                w = w2;
                h = h2;
            }
            
            if(value instanceof Double ||value instanceof Float){
                JTextField tx=new JTextField();
                setHorizontalAlignment(tx.RIGHT);
            }
            
            setForeground(new Color(0,0,0));
            if (row%2==0){
                setBackground(w);
            }else{
                setBackground(g);
            }
            if(isSelected){
                //setBackground(new Color(248,255,167));//[174,212,254]
                setBackground(new Color(255,255,102));
               // setForeground(new Color(255,255,255));
            }
            
            setFont(new Font(Font.SANS_SERIF, 0, 12));
            
            setValue(value);
            return this;
        }
    }
    
    
    private void tableLook(){
        tblBayar.removeColumn(tblBayar.getColumnModel().getColumn(0));
        tblBayar.getColumnModel().getColumn(0).setPreferredWidth(250);
        tblBayar.getColumnModel().getColumn(1).setPreferredWidth(400);
        tblBayar.getColumnModel().getColumn(2).setPreferredWidth(600);
        
        MyRowRenderer render=new MyRowRenderer();
        
        for(int i=1; i<tblBayar.getColumnCount(); i++){
            tblBayar.getColumnModel().getColumn(i).setCellRenderer(render);
            
        }
        tblBayar.setRowHeight(24);
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmTrxBayar_Old().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblBayar;
    // End of variables declaration//GEN-END:variables
    
}
